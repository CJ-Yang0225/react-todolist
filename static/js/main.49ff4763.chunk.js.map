{"version":3,"sources":["components/TaskNavbar.js","components/TaskCreateForm.js","components/TaskCard.js","components/App.js","index.js"],"names":["defaultTabClassList","activatedTabClassList","filterTypes","labelByFilterType","All","Processing","Completed","TaskNavbar","activatedFilterType","value","emitChange","onChange","tabs","map","filterType","index","isActive","label","className","concat","withActivatedTabClassList","join","href","onClick","event","preventDefault","initialTask","title","date","time","message","isDone","isFavorite","TaskCreateForm","emitCreate","onCreate","useState","isExpanded","setIsExpanded","task","setTask","resetTask","handleChange","taskProps","target","name","htmlFor","icon","type","placeholder","autoComplete","onFocus","style","display","height","isValidTask","alert","TaskCard","onUpdate","emitRemove","onRemove","isEditing","setIsEditing","taskForEdit","setTaskForEdit","useEffect","isEditingClassList","isFavoriteClassList","Fragment","checked","disabled","demoTasks","loadTasks","JSON","parse","localStorage","getItem","TaskFilter","App","tasks","setTasks","taskFilterType","setTaskFilterType","setItem","stringify","saveTasks","Object","assign","filteredTasks","useMemo","filter","sort","taskA","indexForRemove","_","tasksRef","useSpringRef","transitionTasks","useTransition","ref","keys","Array","length","fill","trail","from","opacity","scale","enter","leave","useChain","div","children","library","add","fas","far","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49ff4763.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst defaultTabClassList = [\"task-navbar__link\"];\r\nconst activatedTabClassList = [\"task-navbar__link--active\"];\r\nconst filterTypes = [\"All\", \"Processing\", \"Completed\"];\r\n\r\nconst labelByFilterType = {\r\n  All: \"All Tasks\",\r\n  Processing: \"Processing\",\r\n  Completed: \"Completed\",\r\n};\r\n\r\nconst withActivatedTabClassList = (isActive) =>\r\n  isActive ? activatedTabClassList : [];\r\n\r\nconst TaskNavbar = ({\r\n  value: activatedFilterType,\r\n  onChange: emitChange,\r\n}) => {\r\n  const renderTab = (filterType, index) => {\r\n    const isActive = filterType === activatedFilterType;\r\n\r\n    const label = labelByFilterType[filterType];\r\n\r\n    const className = defaultTabClassList\r\n      .concat(withActivatedTabClassList(isActive))\r\n      .join(\" \");\r\n\r\n    const handleClick = (event) => {\r\n      event.preventDefault();\r\n      emitChange(filterType);\r\n    };\r\n\r\n    return (\r\n      <a key={index} href=\"/#\" className={className} onClick={handleClick}>\r\n        {label}\r\n      </a>\r\n    );\r\n  };\r\n\r\n  const tabs = filterTypes.map(renderTab);\r\n\r\n  return (\r\n    <nav className=\"task-navbar\">\r\n      <div className=\"task-navbar__tabs\">{tabs}</div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default TaskNavbar;\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst isValidTask = ({ title, date, time }) => title && date && time;\r\n\r\nconst initialTask = {\r\n  title: \"\",\r\n  date: \"\",\r\n  time: \"\",\r\n  message: \"\",\r\n  isDone: false,\r\n  isFavorite: false,\r\n};\r\n\r\nconst TaskCreateForm = ({ onCreate: emitCreate }) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  const [task, setTask] = useState(initialTask);\r\n\r\n  const resetTask = () => setTask(initialTask);\r\n\r\n  const toggleDetail = () => setIsExpanded((isExpanded) => !isExpanded);\r\n\r\n  const handleChange = (event) => {\r\n    setTask((taskProps) => ({\r\n      ...taskProps,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n  };\r\n\r\n  const handleCreate = () => {\r\n    if (!isValidTask(task)) {\r\n      alert(\"Please enter Task Title and Deadline\");\r\n      return;\r\n    }\r\n\r\n    emitCreate(task);\r\n    resetTask();\r\n    setIsExpanded(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    resetTask();\r\n    setIsExpanded(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-creator\">\r\n      <label\r\n        htmlFor=\"task-creator__input\"\r\n        className=\"task-creator__label border-0\"\r\n      >\r\n        <FontAwesomeIcon icon=\"plus\" />\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"title\"\r\n        className=\"task-creator__input\"\r\n        placeholder=\"Add Task Title\"\r\n        autoComplete=\"off\"\r\n        value={task.title}\r\n        onFocus={() => setIsExpanded(true)}\r\n        onChange={handleChange}\r\n      />\r\n      <button className=\"task-creator__option border-0\" onClick={toggleDetail}>\r\n        <FontAwesomeIcon icon=\"ellipsis-v\" />\r\n      </button>\r\n      <div\r\n        className={`task-detail${isExpanded ? \" task-detail--expanded\" : \"\"}`}\r\n      >\r\n        <div className=\"task-detail__body\">\r\n          <label className=\"task-detail__label\">\r\n            <FontAwesomeIcon icon={[\"far\", \"calendar-alt\"]} />\r\n            Deadline\r\n          </label>\r\n          <div className=\"task-detail__deadline\">\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              className=\"task-detail__date\"\r\n              value={task.date}\r\n              onChange={handleChange}\r\n            />\r\n            <input\r\n              type=\"time\"\r\n              name=\"time\"\r\n              className=\"task-detail__input\"\r\n              value={task.time}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <label className=\"task-detail__label\">\r\n            <FontAwesomeIcon icon={[\"far\", \"file\"]} />\r\n            File\r\n          </label>\r\n          <label\r\n            className=\"task-detail__file\"\r\n            style={{ display: \"inline-block\", height: 32 }}\r\n          >\r\n            <FontAwesomeIcon icon={[\"fas\", \"plus\"]} />\r\n            <input type=\"file\" name=\"file\" className=\"file__input\" />\r\n          </label>\r\n          <label className=\"task-detail__label\">\r\n            <FontAwesomeIcon icon={[\"far\", \"comment-dots\"]} />\r\n            Message\r\n          </label>\r\n          <textarea\r\n            name=\"message\"\r\n            className=\"task-detail__description\"\r\n            placeholder=\"Type your task message here...\"\r\n            value={task.message}\r\n            onChange={handleChange}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"task-detail__footer\">\r\n          <button\r\n            className=\"task-detail__action--danger\"\r\n            onClick={handleCancel}\r\n          >\r\n            <FontAwesomeIcon icon={[\"fas\", \"times\"]} />\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"task-detail__action--primary\"\r\n            onClick={handleCreate}\r\n          >\r\n            <FontAwesomeIcon icon={[\"fas\", \"plus\"]} />\r\n            Save\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCreateForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst TaskCard = ({\r\n  value: task,\r\n  onUpdate: emitChange,\r\n  onRemove: emitRemove,\r\n}) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [taskForEdit, setTaskForEdit] = useState(task);\r\n\r\n  useEffect(() => setTaskForEdit(task), [task]);\r\n\r\n  const handleUpdate = () => {\r\n    emitChange(taskForEdit);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTaskForEdit(task);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const isEditingClassList = isEditing ? \" task-card--editing\" : \"\";\r\n\r\n  const isFavoriteClassList = taskForEdit.isFavorite ? \" task-card--star\" : \"\";\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <li className={`task-card${isEditingClassList + isFavoriteClassList}`}>\r\n        <input\r\n          type=\"checkbox\"\r\n          title=\"isDone\"\r\n          checked={taskForEdit.isDone}\r\n          onChange={({ target: { checked: isDone } }) =>\r\n            emitChange({ ...task, isDone })\r\n          }\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          title={taskForEdit.title}\r\n          value={taskForEdit.title}\r\n          name=\"title\"\r\n          className=\"task-card__edit\"\r\n          onChange={({ target: { value: title } }) =>\r\n            setTaskForEdit((task) => ({ ...task, title }))\r\n          }\r\n          disabled={!isEditing}\r\n        />\r\n        <p title={taskForEdit.message}>{taskForEdit.message}</p>\r\n        <div className=\"task-card__end\">\r\n          <span className=\"widget-group\">\r\n            <button\r\n              title=\"Star Favorite\"\r\n              onClick={() =>\r\n                emitChange({ ...task, isFavorite: !taskForEdit.isFavorite })\r\n              }\r\n            >\r\n              <FontAwesomeIcon\r\n                icon={[taskForEdit.isFavorite ? \"fas\" : \"far\", \"star\"]}\r\n              />\r\n            </button>\r\n            <button title=\"Edit\" onClick={() => setIsEditing(() => !isEditing)}>\r\n              <FontAwesomeIcon icon={[\"far\", \"edit\"]} />\r\n            </button>\r\n            <button title=\"Delete\" onClick={emitRemove}>\r\n              <FontAwesomeIcon icon={[\"far\", \"trash-alt\"]} />\r\n            </button>\r\n          </span>\r\n          <span className=\"deadline-info\">\r\n            {taskForEdit.date} {taskForEdit.time}\r\n          </span>\r\n        </div>\r\n      </li>\r\n      <div\r\n        className={`task-detail${isEditing ? \" task-detail--expanded\" : \"\"}`}\r\n      >\r\n        <div className=\"task-detail__body\">\r\n          <label className=\"task-detail__label\">\r\n            <FontAwesomeIcon icon={[\"far\", \"calendar-alt\"]} />\r\n            Deadline\r\n          </label>\r\n          <div className=\"task-detail__deadline\">\r\n            <input\r\n              type=\"date\"\r\n              name=\"date\"\r\n              className=\"task-detail__date\"\r\n              value={taskForEdit.date}\r\n              onChange={({ target: { value: date } }) =>\r\n                setTaskForEdit((task) => ({ ...task, date }))\r\n              }\r\n            />\r\n            <input\r\n              type=\"time\"\r\n              name=\"time\"\r\n              className=\"task-detail__time\"\r\n              value={taskForEdit.time}\r\n              onChange={({ target: { value: time } }) =>\r\n                setTaskForEdit((task) => ({ ...task, time }))\r\n              }\r\n            />\r\n          </div>\r\n          <label className=\"task-detail__label\">\r\n            <FontAwesomeIcon icon={[\"far\", \"file\"]} />\r\n            File\r\n          </label>\r\n          <label\r\n            className=\"task-detail__file\"\r\n            style={{ display: \"inline-block\", height: 32 }}\r\n          >\r\n            <FontAwesomeIcon icon={[\"fas\", \"plus\"]} />\r\n            <input type=\"file\" name=\"file\" className=\"file__input\" />\r\n          </label>\r\n          <label className=\"task-detail__label\">\r\n            <FontAwesomeIcon icon={[\"far\", \"comment-dots\"]} />\r\n            Message\r\n          </label>\r\n          <textarea\r\n            name=\"message\"\r\n            className=\"task-detail__description\"\r\n            placeholder=\"Type your task here...\"\r\n            value={taskForEdit.message}\r\n            onChange={({ target: { value: message } }) =>\r\n              setTaskForEdit((task) => ({ ...task, message }))\r\n            }\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"task-detail__footer\">\r\n          <button\r\n            className=\"task-detail__action--danger\"\r\n            onClick={handleCancel}\r\n          >\r\n            <FontAwesomeIcon icon={[\"fas\", \"times\"]} />\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"task-detail__action--primary\"\r\n            onClick={handleUpdate}\r\n          >\r\n            <FontAwesomeIcon icon={[\"fas\", \"check\"]} />\r\n            Update\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { animated, useSpringRef, useTransition, useChain } from \"react-spring\";\r\nimport TaskNavbar from \"./TaskNavbar\";\r\nimport TaskCreateForm from \"./TaskCreateForm\";\r\nimport TaskCard from \"./TaskCard\";\r\n\r\nconst demoTasks = [\r\n  {\r\n    title: \"期末考\",\r\n    date: \"2021-01-13\",\r\n    time: \"08:10\",\r\n    message: \"資料庫系統、工程數學\",\r\n    isDone: true,\r\n    isFavorite: false,\r\n  },\r\n  {\r\n    title: \"家務\",\r\n    date: \"2021-01-15\",\r\n    time: \"10:00\",\r\n    message: \"掃地、拖地、洗衣服\",\r\n    isDone: false,\r\n    isFavorite: false,\r\n  },\r\n  {\r\n    title: \"Learning\",\r\n    date: \"2021-12-31\",\r\n    time: \"23:59\",\r\n    message: \"React, Next.js, GraphQL\",\r\n    isDone: false,\r\n    isFavorite: true,\r\n  },\r\n];\r\n\r\nconst loadTasks = () =>\r\n  JSON.parse(localStorage.getItem(\"taskList\")) || demoTasks;\r\n\r\nconst saveTasks = (tasks) =>\r\n  localStorage.setItem(\"taskList\", JSON.stringify(tasks));\r\n\r\nconst TaskFilter = {\r\n  All: () => true,\r\n  Processing: (task) => !task.isDone,\r\n  Completed: (task) => task.isDone,\r\n};\r\n\r\nconst App = () => {\r\n  const [tasks, setTasks] = useState(loadTasks);\r\n  const [taskFilterType, setTaskFilterType] = useState(\"All\");\r\n\r\n  useEffect(() => saveTasks(tasks), [tasks]);\r\n\r\n  const setTask = (index) => (task) =>\r\n    setTasks((tasks) => Object.assign([...tasks], { [index]: task }));\r\n\r\n  const addTask = (task) => setTasks((tasks) => [...tasks, task]);\r\n\r\n  const removeTask = (indexForRemove) => () =>\r\n    setTasks((tasks) => tasks.filter((_, index) => index !== indexForRemove));\r\n\r\n  const filteredTasks = useMemo(\r\n    () =>\r\n      tasks\r\n        .map((task, index) => [task, index])\r\n        .filter(([task]) => TaskFilter[taskFilterType](task))\r\n        .sort(([taskA], [taskB]) => taskB.isFavorite - taskA.isFavorite)\r\n        .map(([task, index]) => (\r\n          <TaskCard\r\n            key={index}\r\n            value={task}\r\n            onUpdate={setTask(index)}\r\n            onRemove={removeTask(index)}\r\n          />\r\n        )),\r\n    [taskFilterType, tasks]\r\n  );\r\n\r\n  const tasksRef = useSpringRef();\r\n\r\n  const transitionTasks = useTransition(filteredTasks, {\r\n    ref: tasksRef,\r\n    keys: new Array(filteredTasks.length).fill().map((_, index) => index),\r\n    trail: 500 / tasks.length,\r\n    from: { opacity: 0, scale: 0 },\r\n    enter: { opacity: 1, scale: 1 },\r\n    leave: { opacity: 0, scale: 0 },\r\n  });\r\n\r\n  useChain([tasksRef], [0.5]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <header>\r\n        <TaskNavbar value={taskFilterType} onChange={setTaskFilterType} />\r\n      </header>\r\n      <main className=\"container main\">\r\n        <TaskCreateForm onCreate={addTask} />\r\n        {transitionTasks((style, task) => (\r\n          <animated.div\r\n            className=\"task-card__wrapper\"\r\n            style={style}\r\n            children={task}\r\n          />\r\n        ))}\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\r\nimport \"./styles/index.scss\";\r\nimport App from './components/App';\r\n\r\nlibrary.add(fas, far);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}